heatmap <- matrix(nrow = ncol(raw_read), ncol = ncol(raw_read))
names <- colnames(raw_read)
rownames(heatmap) <- names
colnames(heatmap) <- names
#   Loop through samples and calculate correlation coefficient between each based on raw filtered reads
#   method:   can be either "pearson" or "spearman" depending on use
for (a in names) {
for (b in names) {
res <- cor.test(y$counts[, a], y$counts[, b], method = "pearson")
heatmap[a, b] <- res$estimate
}
}
#   Setting up nice colors
my_palette <- colorRampPalette(brewer.pal(8, "Blues"))(1000)
#   Setting up dataframe for grouping colors
frame <- data.frame(group = study)
rownames(frame) <- colnames(heatmap)
colnames(frame) <- "Cond"
dev.off() # Reset plot
#   Plot heatmap (see "?pheatmap" for more details about additional parameters)
#   color:                  color scheme to use for the heatmap
#   border_color:           color for borders (NA if no borders)
#   annotation_names_row:   whether names for row annotation should be drawn
#   fontsize:               font size
#   cellwidth/heigth:       cell width/heigth
#   annotation_col:         dataframe that determines coloring based on groups
#   angle_col:              angle of column labels
#   There are a lot of additional parameters (see "?pheatmap")
pheatmap(heatmap, color = my_palette, border_color = NA, annotation_names_row=FALSE,
annotation_names_col=FALSE, fontsize = 10, cellwidth = 10, cellheight = 10,
annotation_col = frame, angle_col = 45)
#   Plot heatmap (see "?pheatmap" for more details about additional parameters)
#   color:                  color scheme to use for the heatmap
#   border_color:           color for borders (NA if no borders)
#   annotation_names_row:   whether names for row annotation should be drawn
#   fontsize:               font size
#   cellwidth/heigth:       cell width/heigth
#   annotation_col:         dataframe that determines coloring based on groups
#   angle_col:              angle of column labels
#   There are a lot of additional parameters (see "?pheatmap")
pheatmap(heatmap, color = my_palette, border_color = NA, annotation_names_row=FALSE,
annotation_names_col=FALSE, fontsize = 10, cellwidth = 6, cellheight = 6,
annotation_col = frame, angle_col = 45)
#   Plot heatmap (see "?pheatmap" for more details about additional parameters)
#   color:                  color scheme to use for the heatmap
#   border_color:           color for borders (NA if no borders)
#   annotation_names_row:   whether names for row annotation should be drawn
#   fontsize:               font size
#   cellwidth/heigth:       cell width/heigth
#   annotation_col:         dataframe that determines coloring based on groups
#   angle_col:              angle of column labels
#   There are a lot of additional parameters (see "?pheatmap")
pheatmap(heatmap, color = my_palette, border_color = NA, annotation_names_row=FALSE,
annotation_names_col=FALSE, fontsize = 10, cellwidth = 8, cellheight = 8,
annotation_col = frame, angle_col = 45)
#   Plot heatmap (see "?pheatmap" for more details about additional parameters)
#   color:                  color scheme to use for the heatmap
#   border_color:           color for borders (NA if no borders)
#   annotation_names_row:   whether names for row annotation should be drawn
#   fontsize:               font size
#   cellwidth/heigth:       cell width/heigth
#   annotation_col:         dataframe that determines coloring based on groups
#   angle_col:              angle of column labels
#   There are a lot of additional parameters (see "?pheatmap")
pheatmap(heatmap, color = my_palette, border_color = NA, annotation_names_row=FALSE,
annotation_names_col=FALSE, fontsize = 10, cellwidth = 10, cellheight = 10,
annotation_col = frame, angle_col = 45)
#   Plot heatmap (see "?pheatmap" for more details about additional parameters)
#   color:                  color scheme to use for the heatmap
#   border_color:           color for borders (NA if no borders)
#   annotation_names_row:   whether names for row annotation should be drawn
#   fontsize:               font size
#   cellwidth/heigth:       cell width/heigth
#   annotation_col:         dataframe that determines coloring based on groups
#   angle_col:              angle of column labels
#   There are a lot of additional parameters (see "?pheatmap")
pheatmap(heatmap, color = my_palette, border_color = NA, annotation_names_row=FALSE,
annotation_names_col=FALSE, fontsize = 9, cellwidth = 10, cellheight = 10,
annotation_col = frame, angle_col = 45)
save.image("C:/Users/bobye/OneDrive/Desktop/Vatine Analysis/20200502_Vatine_analysis_environment.RData")
load("C:/Users/bobye/Dropbox/Searson RNA sequencing/Data analysis/Differentiation/20200426_Differentiation_environment.RData")
?euler
library(edgeR)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("limma")
library(limma)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("Glimma")
library(Glimma)
# install.packages(gplots)
library(gplots)
# install.packages("RColorBrewer")
library(RColorBrewer)
# install.packages("org.Hs.eg.db")
library(org.Hs.eg.db)
# install.packages("pheatmap")
library(pheatmap)
# install.packages("eulerr")
library(eulerr)
?euler
?plot
plot(euler(summa.efit_down, shape = "ellipse"), col = c("green", "red"), quantities = TRUE, main = "Down-Regulated DEGs (n = 5259)")
#   Venn diagram common significantly DEGs between comparisons
dev.off()
par(pty = "s")
plot(euler(summa.efit_up, shape = "ellipse"),  main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), lab = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
fit.contdatatable <- topTable(efit, number = length(efit$coefficients), coef=1,sort.by="p")
View(fit.contdatatable)
matrix <- fit.contdatatable
matrix$Color = "grey"
matrix$Color[(matrix$adj.P.Val <= 0.05) & (matrix$logFC > 0)] = "green"
matrix$Color[(matrix$adj.P.Val <= 0.05) & (matrix$logFC < 0)] = "red"
# Plot all points at once, using newly generated colours
par(pty = "s")
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,14), col=matrix$Color, xlim=c(-15,15), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.7, cex.lab = 1.2, cex.axis = 1.2)
min(matrix$logFC)
max(matrix$logFC)
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,14), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.7, cex.lab = 1.2, cex.axis = 1.2)
min(-log10(matrix$P.Val))
max(-log10(matrix$P.Val))
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.7, cex.lab = 1.2, cex.axis = 1.2)
matrix$Color[(matrix$adj.P.Val <= 0.05) & (matrix$logFC > 0)] = "darkgreen"
matrix$Color[(matrix$adj.P.Val <= 0.05) & (matrix$logFC < 0)] = "red"
# Plot all points at once, using newly generated colours
par(pty = "s")
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.7, cex.lab = 1.2, cex.axis = 1.2)
matrix$Color[(matrix$adj.P.Val <= 0.05) & (matrix$logFC > 0)] = "green"
matrix$Color[(matrix$adj.P.Val <= 0.05) & (matrix$logFC < 0)] = "red"
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.7, cex.lab = 1.2, cex.axis = 1.2)
volcano(efit, coef = 1)
volcanoplot(efit, coef = 1)
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 1, cex.lab = 1.2, cex.axis = 1.2)
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.9, cex.lab = 1.2, cex.axis = 1.2)
#   Checking
vennDiagram(summa.efit[,1:3], include=c("up","down"))
View(summa.efit)
?vennDiagram
#   Checking
vennDiagram(summa.efit[,1:3], include=c("up","down"))
?volcanoplot
volcanoplot(efit, coef = 1, highlight = 100)
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.9, cex.lab = 1.2, cex.axis = 1.2, names = colnames(matrix$logFC))
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = rownames(matrix$logFC),
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.9, cex.lab = 1.2, cex.axis = 1.2)
?plot
plot(matrix$logFC,-log10(matrix$P.Val), ylim=c(0,17), col=matrix$Color, xlim=c(-13,13), pch = 20,
xlab = "Log2 Fold Change", ylab = "-log10(P-value)", cex = 0.9, cex.lab = 1.2, cex.axis = 1.2)
volcanoplot(efit, coef = 1)
#   Venn diagram common significantly DEGs between comparisons
dev.off()
par(pty = "s")
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_down, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Down-Regulated DEGs (n = 5259)")
plot(euler(summa.efit_up, shape = "ellipse"), col = "red", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), col = "red", col.bg = "white", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), col = "red", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), col = "red", pty.bg = "white", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
col.bg
plot(euler(summa.efit_up, shape = "ellipse"), col = "red", bg = "white", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), col = "green", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_down, shape = "ellipse"), col = "red", labels = FALSE, quantities = TRUE, main = "Down-Regulated DEGs (n = 5259)")
?euler
plot(euler(summa.efit_up, shape = "ellipse", col = "purple"), col = "green", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse", color = "purple"), col = "green", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse", bg = "purple"), col = "green", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse", bg = "red"), col = "green", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse", col = "red"), col = "green", labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse", fills = c("red, green, blue")), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_down, shape = "ellipse", eulerr_options(fills = c("red, green, blue"))), labels = FALSE, quantities = TRUE, main = "Down-Regulated DEGs (n = 5259)")
eulerr_options(fills = c("red, green, blue"))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options()
#   Venn diagram common significantly DEGs between comparisons
dev.off()
eulerr_options()
eulerr_options(fills = c("red, green, blue", 2))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list("red, green, blue", 2))
plot(euler(summa.efit_up shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = "red, green, blue", alpha = 2))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = "red", green, blue"", alpha = 2))
eulerr_options(fills = list(fill = "red", alpha = 2))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = "red", alpha = .5))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("red", "green", "blue"), alpha = .5))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("red", "light red", "crimson"), alpha = .5))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("red", "lightred", "crimson"), alpha = .5))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("red", "dark red", "crimson"), alpha = .5))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("red", "dark red", "orange"), alpha = .5))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("red", "dark red", "orange"), alpha = .1))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
par(pty = "s")
eulerr_options(fills = list(fill = c("red", "dark red", "orange"), alpha = .4))
plot(euler(summa.efit_up, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Up-Regulated DEGs (n = 5520)")
plot(euler(summa.efit_down, shape = "ellipse"), labels = FALSE, quantities = TRUE, main = "Down-Regulated DEGs (n = 5259)")
load("C:/Users/bobye/Dropbox/Searson RNA sequencing/Data analysis/WTC models/20200427_Analysis_environment_robert.RData")
View(CPMs)
#   coef:   which comparison to plot (in order of contr.matrix)
#           In this case, coef=1 for threevstwo
volcanoplot(efit,coef=1)
# BiocManager::install("edgeR")
library(edgeR)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("limma")
library(limma)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("Glimma")
library(Glimma)
# install.packages(gplots)
library(gplots)
# install.packages("RColorBrewer")
library(RColorBrewer)
# install.packages("org.Hs.eg.db")
library(org.Hs.eg.db)
# install.packages("pheatmap")
library(pheatmap)
vennDiagram(summa.efit[,1:2], circle.col=c("turquoise", "salmon"))
load("C:/Users/bobye/Dropbox/Searson RNA sequencing/Data analysis/WTC models/20200401_Analysis_environment.RData")
load("C:/Users/bobye/Dropbox/Searson RNA sequencing/Data analysis/WTC models/20200316_Analysis_environment.RData")
load("C:/Users/bobye/Dropbox/Searson RNA sequencing/Data analysis/WTC models/20200427_Analysis_environment_robert.RData")
# 10: Differential expression ----------------------------------------------
#   Set up design matrix
design <- model.matrix(~0+study)
y$samples
load("C:/Users/bobye/Dropbox/Searson RNA sequencing/Data analysis/WTC models/20200512_Analysis_environment_robert.RData")
library(edgeR)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("limma")
library(limma)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("Glimma")
library(Glimma)
# install.packages(gplots)
library(gplots)
# install.packages("RColorBrewer")
library(RColorBrewer)
# install.packages("org.Hs.eg.db")
library(org.Hs.eg.db)
# install.packages("pheatmap")
library(pheatmap)
# install.packages("eulerr")
library(eulerr)
plot(euler(together, shape = "ellipse"), labels = FALSE, quantities = FALSE, main = "Up-Regulated DEGs (n = 5520)")
eulerr_options(fills = list(fill = c("firebrick1", "darkseagreen1"), alpha = .5))
plot(euler(together, shape = "ellipse"), labels = FALSE, quantities = FALSE, main = "2D vs 3D")
plot(venn(together), labels = FALSE, quantities = FALSE, main = "2D vs 3D")
eulerr_options(fills = list(fill = c("firebrick1", "darkseagreen1"), alpha = .5))
plot(venn(together), labels = FALSE, quantities = FALSE, main = "2D vs 3D")
load("D:/BDC2020/bdc2020/Hopkinsdata/HopkinsData_environment.RData")
########## Hopkins data #######################################################
# Set working directory
setwd("D:/BDC2020/bdc2020/Hopkinsdata/Datafiles")
JieData <- read.delim(file = "JieYingWu Data.txt", header = TRUE, sep = ",")
colnames(JieData)
sum(rownames(JieData) %in% rownames(merged))
sum(rownames(JieData) %in% merged$FIPS)
View(JieData)
sum(JieData$FIPS %in% merged$FIPS)
View(JieData[1, ])
head(JieData)
View(head(JieData))
View(colnames(JieData))
max(JieData$Economic_typology_2015)
min(JieData$Economic_typology_2015)
min(JieData$Economic_typology_2015[!is.na(JieData$Economic_typology_2015)])
max(JieData$Economic_typology_2015[!is.na(JieData$Economic_typology_2015)])
colnames(JieData[27:30])
colnames(JieData[110, 111])
colnames(JieData[c(110, 111)])
colnames(JieData[110])
colnames(JieData[250])
colnames(JieData[251])
colnames(JieData[253])
x <- "Active.General.Surgeons.per.100000.Population.2018..AAMC."
JieData[1, x]
JieData[2, x]
colnames(JieData[254])
colnames(JieData[255])
colnames(JieData[25])
colnames(JieData[256])
colnames(JieData[257])
colnames(JieData[327])
colnames(JieData[331])
colnames(JieData[338])
colnames(JieData[339])
# Specify fields (for details see:
fields <- c("FIPS", "Rural-urban_Continuum Code_2013", "Urban_Influence_Code_2013",
"Economic_typology_2015", "Less.than.a.high.school.diploma.2014.18",
"High.school.diploma.only.2014.18", "Some.college.or.associate.s.degree.2014.18",
"Bachelor.s.degree.or.higher.2014.18", "Percent.of.adults.with.less.than.a.high.school.diploma.2014.18",
"Percent.of.adults.with.a.high.school.diploma.only.2014.18", "Percent.of.adults.completing.some.college.or.associate.s.degree.2014.18",
"Percent.of.adults.with.a.bachelor.s.degree.or.higher.2014.18", "POVALL_2018", "MEDHHINC_2018",
"Density.per.square.mile.of.land.area...Population", "Density.per.square.mile.of.land.area...Housing.units",
"Total_Male", "Total_Female",
"Total_age18to64", "Male_age18to64", "Female_age18to64",
"Total_age65plus", "Male_age65plus", "Female_age65plus",
"Total_age85plusr", "Male_age85plusr", "Female_age85plusr",
"Active.Physicians.per.100000.Population.2018..AAMC.", "Total.Active.Patient.Care.Physicians.per.100000.Population.2018..AAMC.",
"Active.Primary.Care.Physicians.per.100000.Population.2018..AAMC.", "Active.General.Surgeons.per.100000.Population.2018..AAMC.",
"Active.Patient.Care.General.Surgeons.per.100000.Population.2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Female.2018..AAMC.",
"Fraction.of.Active.Physicians.Who.Are.International.Medical.Graduates..IMGs..2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Age.60.or.Older.2018..AAMC.",
"Anatomic.Clinical.Pathology..AAMC.", "Anesthesiology..AAMC.", "Cardiovascular.Disease..AAMC.",
"Dermatology..AAMC.", "Emergency.Medicine..AAMC.", "Family.Medicine.General.Practice..AAMC.",
"Gastroenterology..AAMC.", "General.Surgery..AAMC.", "Hematology...Oncology..AAMC.", "Internal.Medicine..AAMC.",
"Neurology..AAMC.", "Orthopedic.Surgery..AAMC.", "Otolaryngology..AAMC.", "Pediatrics....AAMC.", "Plastic.Surgery..AAMC.",
"Psychiatry..AAMC.", "Radiology...Diagnostic.Radiology..AAMC.", "Total.nurse.practitioners..2019.", "Total.physician.assistants..2019.",
"Total.Hospitals..2019.", "Internal.Medicine.Primary.Care..2019.", "Family.Medicine.General.Practice.Primary.Care..2019.",
"Pediatrics.Primary.Care..2019.", "Obstetrics...Gynecology.Primary.Care..2019.", "Geriatrics.Primary.Care..2019.",
"Total.Primary.Care.Physicians..2019.", "Psychiatry.specialists..2019.", "Surgery.specialists..2019.",
"Anesthesiology.specialists..2019.", "Emergency.Medicine.specialists..2019.", "Radiology.specialists..2019.",
"Cardiology.specialists..2019.", "Oncology..Cancer..specialists..2019.", "Endocrinology.Diabetes.and.Metabolism.specialists..2019.",
"All.Other.Specialties.specialists..2019.", "Total.Specialist.Physicians..2019.",
"ICU.Beds", "transit_scores...population.weighted.averages.aggregated.from.town.city.level.to.county",
"Total.number.of.UCR..Uniform.Crime.Report..Index.crimes.excluding.arson.", "Total.number.of.UCR..Uniform.Crime.Report..index.crimes.reported.including.arson",
"MURDER", "RAPE", "ROBBERY", "Number.of.AGGRAVATED.ASSAULTS", "BURGLRY", "LARCENY", "MOTOR.VEHICLE.THEFTS", "ARSON"
)
JieData <- JieData[, fields]
JieData[, c("Total.number.of.UCR..Uniform.Crime.Report..Index.crimes.excluding.arson.")]
x <- c("Total.number.of.UCR..Uniform.Crime.Report..Index.crimes.excluding.arson.", "Total.number.of.UCR..Uniform.Crime.Report..index.crimes.reported.including.arson")
JieData[, x]
dim(JieData[, x])
# Specify fields (for details see:
fields <- c("FIPS", "Rural.urban_Continuum.Code_2013", "Urban_Influence_Code_2013",
"Economic_typology_2015", "Less.than.a.high.school.diploma.2014.18",
"High.school.diploma.only.2014.18", "Some.college.or.associate.s.degree.2014.18",
"Bachelor.s.degree.or.higher.2014.18", "Percent.of.adults.with.less.than.a.high.school.diploma.2014.18",
"Percent.of.adults.with.a.high.school.diploma.only.2014.18", "Percent.of.adults.completing.some.college.or.associate.s.degree.2014.18",
"Percent.of.adults.with.a.bachelor.s.degree.or.higher.2014.18", "POVALL_2018", "MEDHHINC_2018",
"Density.per.square.mile.of.land.area...Population", "Density.per.square.mile.of.land.area...Housing.units",
"Total_Male", "Total_Female",
"Total_age18to64", "Male_age18to64", "Female_age18to64",
"Total_age65plus", "Male_age65plus", "Female_age65plus",
"Total_age85plusr", "Male_age85plusr", "Female_age85plusr",
"Active.Physicians.per.100000.Population.2018..AAMC.", "Total.Active.Patient.Care.Physicians.per.100000.Population.2018..AAMC.",
"Active.Primary.Care.Physicians.per.100000.Population.2018..AAMC.", "Active.General.Surgeons.per.100000.Population.2018..AAMC.",
"Active.Patient.Care.General.Surgeons.per.100000.Population.2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Female.2018..AAMC.",
"Fraction.of.Active.Physicians.Who.Are.International.Medical.Graduates..IMGs..2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Age.60.or.Older.2018..AAMC.",
"Anatomic.Clinical.Pathology..AAMC.", "Anesthesiology..AAMC.", "Cardiovascular.Disease..AAMC.",
"Dermatology..AAMC.", "Emergency.Medicine..AAMC.", "Family.Medicine.General.Practice..AAMC.",
"Gastroenterology..AAMC.", "General.Surgery..AAMC.", "Hematology...Oncology..AAMC.", "Internal.Medicine..AAMC.",
"Neurology..AAMC.", "Orthopedic.Surgery..AAMC.", "Otolaryngology..AAMC.", "Pediatrics....AAMC.", "Plastic.Surgery..AAMC.",
"Psychiatry..AAMC.", "Radiology...Diagnostic.Radiology..AAMC.", "Total.nurse.practitioners..2019.", "Total.physician.assistants..2019.",
"Total.Hospitals..2019.", "Internal.Medicine.Primary.Care..2019.", "Family.Medicine.General.Practice.Primary.Care..2019.",
"Pediatrics.Primary.Care..2019.", "Obstetrics...Gynecology.Primary.Care..2019.", "Geriatrics.Primary.Care..2019.",
"Total.Primary.Care.Physicians..2019.", "Psychiatry.specialists..2019.", "Surgery.specialists..2019.",
"Anesthesiology.specialists..2019.", "Emergency.Medicine.specialists..2019.", "Radiology.specialists..2019.",
"Cardiology.specialists..2019.", "Oncology..Cancer..specialists..2019.", "Endocrinology.Diabetes.and.Metabolism.specialists..2019.",
"All.Other.Specialties.specialists..2019.", "Total.Specialist.Physicians..2019.",
"ICU.Beds", "transit_scores...population.weighted.averages.aggregated.from.town.city.level.to.county",
"Total.number.of.UCR..Uniform.Crime.Report..Index.crimes.excluding.arson.", "Total.number.of.UCR..Uniform.Crime.Report..index.crimes.reported.including.arson",
"MURDER", "RAPE", "ROBBERY", "Number.of.AGGRAVATED.ASSAULTS", "BURGLRY", "LARCENY", "MOTOR.VEHICLE.THEFTS", "ARSON"
)
JieData <- JieData[, fields]
save.image("D:/BDC2020/bdc2020/Hopkinsdata/HopkinsData_environment.RData")
sum(is.na(JieData))
head(JieData)
View(head(JieData))
rownames(JieData) <- JieData$FIPS
View(head(JieData))
dim(JieData[as.character(merged$FIPS), ])
# Merge
merged <- cbind(merged, JieData[as.character(merged$FIPS), ])
25+83
# Write to file
write.csv(merged, "merged6.csv", row.names = FALSE)
save.image("D:/BDC2020/bdc2020/Hopkinsdata/HopkinsData_environment.RData")
########## Hospital data #######################################################
# https://www.kaggle.com/center-for-medicare-and-medicaid/hospital-ratings/data
census <- read.delim(file = "Hospital General Information.csv", header = TRUE, sep = ",")
View(census)
# Remove counties (rows) with NAs
JieData <- JieData[complete.cases(census), ]
# Set rownames as FIPS
rownames(JieData) <- JieData$FIPS
View(JieData)
JieData <- read.delim(file = "JieYingWu Data.txt", header = TRUE, sep = ",")
# Specify fields (for details see:
fields <- c("FIPS", "Rural.urban_Continuum.Code_2013", "Urban_Influence_Code_2013",
"Economic_typology_2015", "Less.than.a.high.school.diploma.2014.18",
"High.school.diploma.only.2014.18", "Some.college.or.associate.s.degree.2014.18",
"Bachelor.s.degree.or.higher.2014.18", "Percent.of.adults.with.less.than.a.high.school.diploma.2014.18",
"Percent.of.adults.with.a.high.school.diploma.only.2014.18", "Percent.of.adults.completing.some.college.or.associate.s.degree.2014.18",
"Percent.of.adults.with.a.bachelor.s.degree.or.higher.2014.18", "POVALL_2018", "MEDHHINC_2018",
"Density.per.square.mile.of.land.area...Population", "Density.per.square.mile.of.land.area...Housing.units",
"Total_Male", "Total_Female",
"Total_age18to64", "Male_age18to64", "Female_age18to64",
"Total_age65plus", "Male_age65plus", "Female_age65plus",
"Total_age85plusr", "Male_age85plusr", "Female_age85plusr",
"Active.Physicians.per.100000.Population.2018..AAMC.", "Total.Active.Patient.Care.Physicians.per.100000.Population.2018..AAMC.",
"Active.Primary.Care.Physicians.per.100000.Population.2018..AAMC.", "Active.General.Surgeons.per.100000.Population.2018..AAMC.",
"Active.Patient.Care.General.Surgeons.per.100000.Population.2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Female.2018..AAMC.",
"Fraction.of.Active.Physicians.Who.Are.International.Medical.Graduates..IMGs..2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Age.60.or.Older.2018..AAMC.",
"Anatomic.Clinical.Pathology..AAMC.", "Anesthesiology..AAMC.", "Cardiovascular.Disease..AAMC.",
"Dermatology..AAMC.", "Emergency.Medicine..AAMC.", "Family.Medicine.General.Practice..AAMC.",
"Gastroenterology..AAMC.", "General.Surgery..AAMC.", "Hematology...Oncology..AAMC.", "Internal.Medicine..AAMC.",
"Neurology..AAMC.", "Orthopedic.Surgery..AAMC.", "Otolaryngology..AAMC.", "Pediatrics....AAMC.", "Plastic.Surgery..AAMC.",
"Psychiatry..AAMC.", "Radiology...Diagnostic.Radiology..AAMC.", "Total.nurse.practitioners..2019.", "Total.physician.assistants..2019.",
"Total.Hospitals..2019.", "Internal.Medicine.Primary.Care..2019.", "Family.Medicine.General.Practice.Primary.Care..2019.",
"Pediatrics.Primary.Care..2019.", "Obstetrics...Gynecology.Primary.Care..2019.", "Geriatrics.Primary.Care..2019.",
"Total.Primary.Care.Physicians..2019.", "Psychiatry.specialists..2019.", "Surgery.specialists..2019.",
"Anesthesiology.specialists..2019.", "Emergency.Medicine.specialists..2019.", "Radiology.specialists..2019.",
"Cardiology.specialists..2019.", "Oncology..Cancer..specialists..2019.", "Endocrinology.Diabetes.and.Metabolism.specialists..2019.",
"All.Other.Specialties.specialists..2019.", "Total.Specialist.Physicians..2019.",
"ICU.Beds", "transit_scores...population.weighted.averages.aggregated.from.town.city.level.to.county",
"Total.number.of.UCR..Uniform.Crime.Report..Index.crimes.excluding.arson.", "Total.number.of.UCR..Uniform.Crime.Report..index.crimes.reported.including.arson",
"MURDER", "RAPE", "ROBBERY", "Number.of.AGGRAVATED.ASSAULTS", "BURGLRY", "LARCENY", "MOTOR.VEHICLE.THEFTS", "ARSON"
)
JieData <- JieData[, fields]
# Remove counties (rows) with NAs
JieData <- JieData[complete.cases(census), ]
JieData <- read.delim(file = "JieYingWu Data.txt", header = TRUE, sep = ",")
# Specify fields (for details see:
fields <- c("FIPS", "Rural.urban_Continuum.Code_2013", "Urban_Influence_Code_2013",
"Economic_typology_2015", "Less.than.a.high.school.diploma.2014.18",
"High.school.diploma.only.2014.18", "Some.college.or.associate.s.degree.2014.18",
"Bachelor.s.degree.or.higher.2014.18", "Percent.of.adults.with.less.than.a.high.school.diploma.2014.18",
"Percent.of.adults.with.a.high.school.diploma.only.2014.18", "Percent.of.adults.completing.some.college.or.associate.s.degree.2014.18",
"Percent.of.adults.with.a.bachelor.s.degree.or.higher.2014.18", "POVALL_2018", "MEDHHINC_2018",
"Density.per.square.mile.of.land.area...Population", "Density.per.square.mile.of.land.area...Housing.units",
"Total_Male", "Total_Female",
"Total_age18to64", "Male_age18to64", "Female_age18to64",
"Total_age65plus", "Male_age65plus", "Female_age65plus",
"Total_age85plusr", "Male_age85plusr", "Female_age85plusr",
"Active.Physicians.per.100000.Population.2018..AAMC.", "Total.Active.Patient.Care.Physicians.per.100000.Population.2018..AAMC.",
"Active.Primary.Care.Physicians.per.100000.Population.2018..AAMC.", "Active.General.Surgeons.per.100000.Population.2018..AAMC.",
"Active.Patient.Care.General.Surgeons.per.100000.Population.2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Female.2018..AAMC.",
"Fraction.of.Active.Physicians.Who.Are.International.Medical.Graduates..IMGs..2018..AAMC.", "Fraction.of.Active.Physicians.Who.Are.Age.60.or.Older.2018..AAMC.",
"Anatomic.Clinical.Pathology..AAMC.", "Anesthesiology..AAMC.", "Cardiovascular.Disease..AAMC.",
"Dermatology..AAMC.", "Emergency.Medicine..AAMC.", "Family.Medicine.General.Practice..AAMC.",
"Gastroenterology..AAMC.", "General.Surgery..AAMC.", "Hematology...Oncology..AAMC.", "Internal.Medicine..AAMC.",
"Neurology..AAMC.", "Orthopedic.Surgery..AAMC.", "Otolaryngology..AAMC.", "Pediatrics....AAMC.", "Plastic.Surgery..AAMC.",
"Psychiatry..AAMC.", "Radiology...Diagnostic.Radiology..AAMC.", "Total.nurse.practitioners..2019.", "Total.physician.assistants..2019.",
"Total.Hospitals..2019.", "Internal.Medicine.Primary.Care..2019.", "Family.Medicine.General.Practice.Primary.Care..2019.",
"Pediatrics.Primary.Care..2019.", "Obstetrics...Gynecology.Primary.Care..2019.", "Geriatrics.Primary.Care..2019.",
"Total.Primary.Care.Physicians..2019.", "Psychiatry.specialists..2019.", "Surgery.specialists..2019.",
"Anesthesiology.specialists..2019.", "Emergency.Medicine.specialists..2019.", "Radiology.specialists..2019.",
"Cardiology.specialists..2019.", "Oncology..Cancer..specialists..2019.", "Endocrinology.Diabetes.and.Metabolism.specialists..2019.",
"All.Other.Specialties.specialists..2019.", "Total.Specialist.Physicians..2019.",
"ICU.Beds", "transit_scores...population.weighted.averages.aggregated.from.town.city.level.to.county",
"Total.number.of.UCR..Uniform.Crime.Report..Index.crimes.excluding.arson.", "Total.number.of.UCR..Uniform.Crime.Report..index.crimes.reported.including.arson",
"MURDER", "RAPE", "ROBBERY", "Number.of.AGGRAVATED.ASSAULTS", "BURGLRY", "LARCENY", "MOTOR.VEHICLE.THEFTS", "ARSON"
)
JieData <- JieData[, fields]
# Remove counties (rows) with NAs
JieData <- JieData[complete.cases(JieData), ]
# Set rownames as FIPS
rownames(JieData) <- JieData$FIPS
# Merge
merged <- cbind(merged, JieData[as.character(merged$FIPS), ])
sum(is.na(merged))
load("D:/BDC2020/bdc2020/Hopkinsdata/HopkinsData_environment.RData")
dim(merged[complete.cases(merged), ])
sum(is.na(merged))
sum(is.na(merged[complete.cases(merged),]))
# Remove NAs
merged <- dim(merged[complete.cases(merged), ])
load("D:/BDC2020/bdc2020/Hopkinsdata/HopkinsData_environment.RData")
# Remove NAs
merged <- merged[complete.cases(merged), ]
# Write to file
write.csv(merged, "merged6.csv", row.names = FALSE)
sum(duplicated(merged$FIPS))
colnames(census)
########## Hospital data #######################################################
# https://www.kaggle.com/center-for-medicare-and-medicaid/hospital-ratings/data
census <- read.delim(file = "Hospital General Information.csv", header = TRUE, sep = ",")
save.image("D:/BDC2020/bdc2020/Hopkinsdata/HopkinsData_environment.RData")
colnames(census)
View(census)
duplicated(census$Provider.ID)
sum(duplicated(census$Provider.ID))
########## Hospital data #######################################################
# https://www.kaggle.com/center-for-medicare-and-medicaid/hospital-ratings/data
census <- read.delim(file = "Hospitals.csv", header = TRUE, sep = ",")
View(census)
sum(census$COUNTRY == "USA")
########## Hospital data #######################################################
# https://hifld-geoplatform.opendata.arcgis.com/datasets/hospitals/data?selectedAttribute=BEDS
census <- read.delim(file = "Hospitals.csv", header = TRUE, sep = ",")
sum(is.na(census$COUNTYFIPS)
)
census[is.na(census$COUNTYFIPS), ]$COUNTRY
